---
export interface Props {
    filename?: string;
    code: string;
    showHeader?: boolean;
    showCopyButton?: boolean;
    height?: string;
    className?: string;
}

const { 
    filename = "python_code.py",
    code,
    showHeader = true,
    showCopyButton = false,
    height = "auto",
    className = ""
} = Astro.props;

// Clean up code - just trim whitespace from start and end
const cleanCode = code.trim();
---

<div class={`code-example ${className}`}>
    {showHeader && (
        <div class="code-header d-flex justify-content-between align-items-center">
            <span class="code-filename">{filename}</span>
            {showCopyButton && (
                <button class="btn btn-sm btn-outline-primary copy-btn" type="button" 
                        data-code={cleanCode} title="Copy code">
                    <i class="bi bi-clipboard"></i>
                </button>
            )}
        </div>
    )}
    <div class="code-body" style={height !== "auto" ? `height: ${height}` : ""}>
        <pre><code class="language-python">{cleanCode}</code></pre>
    </div>
</div>

<style>
    .code-example {
        border-radius: 8px;
        overflow: hidden;
        box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);
        margin: 1rem 0;
        transition: all 0.3s ease;
    }

    .code-example:hover {
        box-shadow: 0 4px 16px rgba(0, 0, 0, 0.15);
    }

    .code-header {
        background: linear-gradient(135deg, #6c757d, #495057);
        color: white;
        padding: 0.75rem 1rem;
        font-family: 'Monaco', 'Menlo', 'Ubuntu Mono', monospace;
        font-size: 0.875rem;
        font-weight: 600;
        border-bottom: 1px solid rgba(255, 255, 255, 0.1);
    }

    .code-filename {
        display: flex;
        align-items: center;
    }

    .code-filename::before {
        content: "üêç";
        margin-right: 0.5rem;
        font-size: 1rem;
    }

    .copy-btn {
        border-color: rgba(255, 255, 255, 0.3);
        color: rgba(255, 255, 255, 0.8);
        transition: all 0.2s ease;
    }

    .copy-btn:hover {
        background-color: rgba(255, 255, 255, 0.1);
        border-color: rgba(255, 255, 255, 0.5);
        color: white;
        transform: translateY(-1px);
    }

    .code-body {
        overflow-x: auto;
        position: relative;
    }

    .code-body pre {
        margin: 0;
        padding: 1.25rem;
        border: none;
        font-family: 'Monaco', 'Menlo', 'Ubuntu Mono', 'Consolas', monospace;
        font-size: 0.875rem;
        line-height: 1.6;
    }

    .code-body code {
        padding: 0;
        border-radius: 0;
    }

    /* Dark mode styles */
    :global(body.dark-mode) .code-header {
        background: linear-gradient(135deg, #374151, #1f2937);
    }

    /* Remove dark mode overrides to let Prism theme handle colors */
    
    /* Responsive adjustments */
    @media (max-width: 768px) {
        .code-body pre {
            font-size: 0.8rem;
            padding: 1rem;
        }
        
        .code-header {
            padding: 0.6rem 0.8rem;
            font-size: 0.8rem;
        }
    }
</style>

<script>
    // Add copy functionality
    document.addEventListener('DOMContentLoaded', function() {
        const copyButtons = document.querySelectorAll('.copy-btn');
        
        copyButtons.forEach(button => {
            button.addEventListener('click', async function(this: HTMLButtonElement) {
                const code = this.getAttribute('data-code');
                
                try {
                    if (code) {
                        await navigator.clipboard.writeText(code);
                        
                        // Visual feedback
                        const originalIcon = this.innerHTML;
                        this.innerHTML = '<i class="bi bi-check-lg"></i>';
                        this.classList.remove('btn-outline-primary');
                        this.classList.add('btn-success');
                        
                        setTimeout(() => {
                            this.innerHTML = originalIcon;
                            this.classList.remove('btn-success');
                            this.classList.add('btn-outline-primary');
                        }, 2000);
                    }
                    
                } catch (err) {
                    console.error('Failed to copy code:', err);
                    
                    // Fallback feedback
                    const originalIcon = this.innerHTML;
                    this.innerHTML = '<i class="bi bi-x-lg"></i>';
                    this.classList.add('btn-danger');
                    
                    setTimeout(() => {
                        this.innerHTML = originalIcon;
                        this.classList.remove('btn-danger');
                    }, 2000);
                }
            });
        });
    });
</script>
