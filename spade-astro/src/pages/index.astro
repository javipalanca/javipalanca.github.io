---
import BaseLayout from '../layouts/BaseLayout.astro';
import Navbar from '../components/Navbar.astro';
import Hero from '../components/Hero.astro';
import FeatureCard from '../components/FeatureCard.astro';
import PluginCard from '../components/PluginCard.astro';
import Footer from '../components/Footer.astro';

// Define features data
const features = [
    {
        icon: 'üîå',
        title: 'XMPP-Based',
        description: 'Built on the XMPP protocol for robust, real-time messaging between agents and humans.',
        features: ['Standardized messaging', 'Presence notification', 'Security features']
    },
    {
        icon: '‚öôÔ∏è',
        title: 'Behaviour-Based Model',
        description: 'Define agent behaviors using cyclic, periodic, one-shot, and finite state machine patterns.',
        features: ['Modular design', 'Task specialization', 'Complex workflow support']
    },
    {
        icon: 'üîÑ',
        title: 'Asyncio Support',
        description: 'Modern asynchronous programming with Python\'s asyncio for concurrent agent operations.',
        features: ['Non-blocking operations', 'Efficient resource usage', 'Modern Python practices']
    },
    {
        icon: 'üëÅÔ∏è',
        title: 'Presence Awareness',
        description: 'Real-time presence notification system to monitor agent status and availability.',
        features: ['Status tracking', 'Automatic reconnection', 'System monitoring']
    },
    {
        icon: 'üåê',
        title: 'Web Interface',
        description: 'Built-in web interface for easy monitoring and interaction with your agents.',
        features: ['Message visualization', 'Agent status dashboard', 'Customizable UI']
    },
    {
        icon: 'üîç',
        title: 'FIPA Compliant',
        description: 'Supports FIPA metadata using XMPP Data Forms for standardized agent communication.',
        features: ['Multi-platform compatibility', 'Protocol interoperability', 'Metadata exchange']
    }
];

// Define plugins data
const plugins = [
    {
        name: 'SPADE BDI',
        description: 'Implement Belief-Desire-Intention agents with AgentSpeak language support.',
        icon: 'brain',
        githubUrl: 'https://github.com/javipalanca/spade_bdi',
        docsUrl: 'https://spade-bdi.readthedocs.io'
    },
    {
        name: 'SPADE PubSub',
        description: 'Add publish-subscribe communication patterns to your agent platform.',
        icon: 'broadcast',
        githubUrl: 'https://github.com/javipalanca/spade_pubsub',
        docsUrl: 'https://spade-pubsub.readthedocs.io'
    },
    {
        name: 'SPADE Artifact',
        description: 'Create and manage artifacts for your agents to interact with.',
        icon: 'box',
        githubUrl: 'https://github.com/javipalanca/spade_artifact',
        docsUrl: 'https://spade-artifact.readthedocs.io'
    },
    {
        name: 'SPADE Norms',
        description: 'Implement normative systems to regulate agent behaviors.',
        icon: 'shield-check',
        githubUrl: 'https://github.com/javipalanca/spade_norms',
        docsUrl: 'https://spade-norms.readthedocs.io'
    },
    {
        name: 'SPADE Bokeh',
        description: 'Integrate interactive Bokeh plots with your agent interfaces.',
        icon: 'graph-up',
        githubUrl: 'https://github.com/javipalanca/spade_bokeh',
        docsUrl: 'https://spade-bokeh.readthedocs.io'
    }
];
---

<BaseLayout title="SPADE - Smart Python Agent Development Environment">
    <Navbar />
    <Hero />
    
    <!-- Badges Section -->
    <section class="badge-section py-4">
        <div class="container text-center">
            <div class="row justify-content-center">
                <div class="col-md-10">
                    <img src="https://img.shields.io/pypi/v/spade.svg" alt="PyPI Version">
                    <img src="https://img.shields.io/pypi/pyversions/spade.svg" alt="Python Versions">
                    <img src="https://img.shields.io/pypi/l/spade" alt="MIT License">
                    <img src="https://github.com/javipalanca/spade/actions/workflows/python-package.yml/badge.svg" alt="CI Status">
                    <img src="https://coveralls.io/repos/github/javipalanca/spade/badge.svg?branch=master" alt="Coverage">
                    <img src="https://readthedocs.org/projects/spade/badge/?version=latest" alt="Documentation">
                    <img src="https://pepy.tech/badge/spade" alt="Downloads">
                </div>
            </div>
        </div>
    </section>

    <!-- Features Section -->
    <section id="features" class="py-5">
        <div class="container">
            <div class="text-center mb-5">
                <h2 class="fw-bold">Key Features</h2>
                <p class="lead text-muted">Discover what makes SPADE the perfect choice for multi-agent systems</p>
            </div>
            <div class="row g-4">
                {features.map((feature) => (
                    <div class="col-md-4">
                        <FeatureCard feature={feature} />
                    </div>
                ))}
            </div>
        </div>
    </section>

    <!-- Code Example Section -->
    <section id="examples" class="py-5 bg-light">
        <div class="container">
            <div class="text-center mb-5">
                <h2 class="fw-bold">See SPADE in Action</h2>
                <p class="lead text-muted">Creating intelligent agents has never been easier</p>
            </div>
            <div class="row align-items-center">
                <div class="col-lg-6">
                    <div class="code-example">
                        <div class="code-header">agent_example.py</div>
                        <div class="code-body">
                            <pre><code class="language-python">{`import spade
from spade.agent import Agent
from spade.behaviour import CyclicBehaviour
from spade.message import Message

class MyAgent(Agent):
    class MyBehaviour(CyclicBehaviour):
        async def run(self):
            msg = await self.receive(timeout=10)
            if msg:
                print(f"Message received: {msg.body}")
                reply = Message(to=str(msg.sender))
                reply.body = "I received your message!"
                await self.send(reply)

    async def setup(self):
        behaviour = self.MyBehaviour()
        self.add_behaviour(behaviour)

async def main():
    agent = MyAgent("agent@localhost", "password")
    await agent.start()

if __name__ == "__main__":
    spade.run(main())`}</code></pre>
                        </div>
                    </div>
                </div>
                <div class="col-lg-6">
                    <h3 class="mb-4">Simple & Intuitive API</h3>
                    <p>SPADE provides a clean, object-oriented API that makes it easy to create powerful multi-agent systems. Define your agents, their behaviors, and how they communicate with just a few lines of code.</p>
                    <p>This example shows a basic agent that can receive messages and automatically reply to them. SPADE handles all the underlying communication details for you.</p>
                    <a href="https://spade-mas.readthedocs.io/en/latest/usage.html" class="btn btn-primary">View More Examples</a>
                </div>
            </div>
        </div>
    </section>

    <!-- Plugins Section -->
    <section id="plugins" class="plugins-section py-5">
        <div class="container">
            <div class="text-center mb-5">
                <h2 class="fw-bold">Extend SPADE with Plugins</h2>
                <p class="lead text-muted">Enhance your agent platform with specialized capabilities</p>
            </div>
            <div class="row g-4">
                {plugins.map((plugin) => (
                    <div class="col-md-6 col-lg-4">
                        <PluginCard plugin={plugin} />
                    </div>
                ))}
                <div class="col-md-6 col-lg-4">
                    <div class="card h-100 border-0 shadow-sm">
                        <div class="card-body">
                            <h5 class="card-title">More Coming Soon</h5>
                            <p class="card-text">The SPADE ecosystem is constantly growing with new plugins and extensions.</p>
                            <a href="https://github.com/javipalanca/spade/discussions" class="btn btn-sm btn-outline-primary">Suggest Ideas</a>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </section>

    <!-- Interactive Demo Section -->
    <section id="interactive-demo" class="py-5">
        <div class="container">
            <div class="text-center mb-5">
                <h2 class="fw-bold">Interactive Agent Demo</h2>
                <p class="lead">See how SPADE agents communicate and interact in real-time</p>
            </div>
            
            <div class="row">
                <div class="col-lg-8 mx-auto">
                    <div class="card border-0 shadow-sm mb-4">
                        <div class="card-body p-0">
                            <div id="agent-demo-container" class="position-relative" style="height: 400px;">
                                <!-- Canvas for agent animation -->
                                <canvas id="agent-canvas" width="800" height="400" class="w-100 h-100"></canvas>
                                
                                <!-- Controls -->
                                <div class="demo-controls position-absolute bottom-0 start-0 end-0 p-3 bg-light bg-opacity-75 dark-mode-aware">
                                    <div class="row align-items-center">
                                        <div class="col">
                                            <button id="start-demo" class="btn btn-primary btn-sm">
                                                <i class="bi bi-play-fill"></i> Start Demo
                                            </button>
                                            <button id="reset-demo" class="btn btn-outline-secondary btn-sm ms-2">
                                                <i class="bi bi-arrow-counterclockwise"></i> Reset
                                            </button>
                                        </div>
                                        <div class="col-auto">
                                            <select id="demo-scenario" class="form-select form-select-sm">
                                                <option value="simple">Basic Communication</option>
                                                <option value="behaviors">Agent Behaviors</option>
                                                <option value="network">Agent Network</option>
                                            </select>
                                        </div>
                                    </div>
                                    <div class="row mt-2" id="demo-status" style="display: none;">
                                        <div class="col">
                                            <small class="text-muted">
                                                <span id="demo-status-text">Demo status will appear here...</span>
                                            </small>
                                        </div>
                                    </div>
                                    <div class="row mt-2" id="demo-legend" style="display: none;">
                                        <div class="col">
                                            <small class="text-muted">
                                                <span class="badge bg-secondary me-2">Gray: Idle</span>
                                                <span class="badge bg-warning me-2">Orange: Working</span>
                                                <span class="text-muted">Hover over agents for more info</span>
                                            </small>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                    
                    <div class="row text-center">
                        <div class="col-md-4">
                            <h6>Agent Communication</h6>
                            <p class="small text-muted">Watch agents send and receive messages using XMPP protocol</p>
                        </div>
                        <div class="col-md-4">
                            <h6>Behavior Patterns</h6>
                            <p class="small text-muted">See different behavior types: Cyclic, Periodic, and One-shot</p>
                        </div>
                        <div class="col-md-4">
                            <h6>Real-time Updates</h6>
                            <p class="small text-muted">Monitor agent status and presence in real-time</p>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </section>

    <!-- Getting Started Section -->
    <section id="docs" class="py-5">
        <div class="container">
            <div class="text-center mb-5">
                <h2 class="fw-bold">Getting Started</h2>
                <p class="lead text-muted">Start building your multi-agent system in minutes</p>
            </div>
            <div class="row">
                <div class="col-lg-6 mb-4 mb-lg-0">
                    <div class="card border-0 shadow-sm h-100">
                        <div class="card-body p-4">
                            <h4 class="card-title">Installation</h4>
                            <div class="code-example">
                                <pre><code class="language-bash">pip install spade</code></pre>
                            </div>
                            <p>SPADE requires Python 3.8 or higher and works on Windows, macOS, and Linux.</p>
                            <div class="mt-3">
                                <h5 class="h6">Quick Start</h5>
                                <div class="code-example">
                                    <pre><code class="language-python">{`import spade

async def main():
    agent = spade.Agent("agent@localhost", "password")
    await agent.start()

if __name__ == "__main__":
    spade.run(main())`}</code></pre>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
                <div class="col-lg-6">
                    <div class="card border-0 shadow-sm h-100">
                        <div class="card-body p-4">
                            <h4 class="card-title">Documentation</h4>
                            <p>Comprehensive guides and API reference to help you get the most out of SPADE.</p>
                            <div class="d-grid gap-2">
                                <a href="https://spade-mas.readthedocs.io/en/latest/usage.html" class="btn btn-primary">
                                    <i class="bi bi-book me-2"></i>User Guide
                                </a>
                                <a href="https://spade-mas.readthedocs.io/en/latest/api.html" class="btn btn-outline-primary">
                                    <i class="bi bi-code-square me-2"></i>API Reference
                                </a>
                                <a href="https://github.com/javipalanca/spade/tree/master/examples" class="btn btn-outline-secondary">
                                    <i class="bi bi-folder2-open me-2"></i>Examples
                                </a>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </section>

    <!-- Use Cases Section -->
    <section id="usecases" class="py-5 bg-light">
        <div class="container">
            <div class="text-center mb-5">
                <h2 class="fw-bold">Use Cases</h2>
                <p class="lead text-muted">SPADE powers intelligent applications across various domains</p>
            </div>
            <div class="row g-4">
                <div class="col-md-6 col-lg-4">
                    <div class="use-case-card p-4 bg-white h-100">
                        <div class="use-case-icon">üè≠</div>
                        <h4>Industrial IoT</h4>
                        <p>Coordinate IoT devices and sensors in smart factories and industrial automation systems.</p>
                    </div>
                </div>
                <div class="col-md-6 col-lg-4">
                    <div class="use-case-card p-4 bg-white h-100">
                        <div class="use-case-icon">üèôÔ∏è</div>
                        <h4>Smart Cities</h4>
                        <p>Manage traffic systems, energy grids, and public services through intelligent agent coordination.</p>
                    </div>
                </div>
                <div class="col-md-6 col-lg-4">
                    <div class="use-case-card p-4 bg-white h-100">
                        <div class="use-case-icon">ü§ñ</div>
                        <h4>Distributed AI</h4>
                        <p>Build distributed artificial intelligence systems with cooperating and competing agents.</p>
                    </div>
                </div>
                <div class="col-md-6 col-lg-4">
                    <div class="use-case-card p-4 bg-white h-100">
                        <div class="use-case-icon">üíπ</div>
                        <h4>Financial Trading</h4>
                        <p>Create autonomous trading agents for algorithmic trading and market analysis.</p>
                    </div>
                </div>
                <div class="col-md-6 col-lg-4">
                    <div class="use-case-card p-4 bg-white h-100">
                        <div class="use-case-icon">üéì</div>
                        <h4>Educational Systems</h4>
                        <p>Develop adaptive learning environments and intelligent tutoring systems.</p>
                    </div>
                </div>
                <div class="col-md-6 col-lg-4">
                    <div class="use-case-card p-4 bg-white h-100">
                        <div class="use-case-icon">üåê</div>
                        <h4>Social Networks</h4>
                        <p>Model complex social interactions and communication patterns in virtual environments.</p>
                    </div>
                </div>
            </div>
        </div>
    </section>

    <!-- Getting Started Section -->
    <section id="docs" class="py-5 bg-light">
        <div class="container">
            <div class="text-center mb-5">
                <h2 class="fw-bold">Get Started in Minutes</h2>
                <p class="lead text-muted">Everything you need to begin your journey with SPADE</p>
            </div>
            <div class="row g-4">
                <div class="col-lg-6">
                    <div class="card border-0 shadow-sm h-100">
                        <div class="card-body p-4">
                            <h4 class="card-title">Quick Installation</h4>
                            <p>Install SPADE using pip and create your first agent in minutes.</p>
                            <div class="code-example">
                                <div class="code-header">Terminal</div>
                                <div class="code-body">
                                    <pre><code class="language-bash">pip install spade</code></pre>
                                </div>
                            </div>
                            <div class="code-example mt-3">
                                <div class="code-header">hello_agent.py</div>
                                <div class="code-body">
                                    <pre><code class="language-python">{`import spade
from spade.agent import Agent
from spade.behaviour import OneShotBehaviour

class MyAgent(Agent):
    class MyBehav(OneShotBehaviour):
        async def run(self):
            print("Hello World!")

    async def setup(self):
        self.add_behaviour(self.MyBehav())

async def main():
    agent = MyAgent("agent@localhost", "password")
    await agent.start()

if __name__ == "__main__":
    spade.run(main())`}</code></pre>
                                </div>
                            </div>
                            <a href="https://spade-mas.readthedocs.io/en/latest/installation.html" class="btn btn-primary">Installation Guide</a>
                        </div>
                    </div>
                </div>
                <div class="col-lg-6">
                    <div class="card border-0 shadow-sm h-100">
                        <div class="card-body p-4">
                            <h4 class="card-title">Documentation</h4>
                            <p>Comprehensive documentation with tutorials, examples, and API reference.</p>
                            <ul class="list-group list-group-flush mb-3">
                                <li class="list-group-item border-0 ps-0">üìö <a href="https://spade-mas.readthedocs.io/en/latest/usage.html">User Guide</a></li>
                                <li class="list-group-item border-0 ps-0">üë®‚Äçüíª <a href="https://spade-mas.readthedocs.io/en/latest/api.html">API Reference</a></li>
                                <li class="list-group-item border-0 ps-0">üìù <a href="https://spade-mas.readthedocs.io/en/latest/examples.html">Examples</a></li>
                                <li class="list-group-item border-0 ps-0">üîß <a href="https://spade-mas.readthedocs.io/en/latest/extending.html">Extension Guide</a></li>
                            </ul>
                            <a href="https://spade-mas.readthedocs.io" class="btn btn-primary">Read the Docs</a>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </section>

    <!-- FAQ Section -->
    <section class="py-5">
        <div class="container">
            <div class="text-center mb-5">
                <h2 class="fw-bold">Frequently Asked Questions</h2>
                <p class="lead text-muted">Get answers to common questions about SPADE</p>
            </div>
            <div class="row justify-content-center">
                <div class="col-lg-10">
                    <div class="accordion" id="faqAccordion">
                        <div class="accordion-item border-0 mb-3 shadow-sm">
                            <h2 class="accordion-header" id="headingOne">
                                <button class="accordion-button" type="button" data-bs-toggle="collapse" data-bs-target="#collapseOne" aria-expanded="true" aria-controls="collapseOne">
                                    What is SPADE and what makes it unique?
                                </button>
                            </h2>
                            <div id="collapseOne" class="accordion-collapse collapse show" aria-labelledby="headingOne" data-bs-parent="#faqAccordion">
                                <div class="accordion-body">
                                    <p>SPADE (Smart Python Agent Development Environment) is a multi-agent systems platform built in Python that leverages XMPP (eXtensible Messaging and Presence Protocol) for communication. What makes SPADE unique is its combination of an intuitive behavior-based agent model with powerful instant messaging capabilities that allow agents to interact with both other agents and humans.</p>
                                    <p>Unlike other agent frameworks, SPADE provides presence awareness, asynchronous operation through asyncio, and a web-based interface out of the box. It's designed to be both powerful for complex systems and approachable for developers new to agent-based programming.</p>
                                </div>
                            </div>
                        </div>
                        <div class="accordion-item border-0 mb-3 shadow-sm">
                            <h2 class="accordion-header" id="headingTwo">
                                <button class="accordion-button collapsed" type="button" data-bs-toggle="collapse" data-bs-target="#collapseTwo" aria-expanded="false" aria-controls="collapseTwo">
                                    Do I need to run my own XMPP server to use SPADE?
                                </button>
                            </h2>
                            <div id="collapseTwo" class="accordion-collapse collapse" aria-labelledby="headingTwo" data-bs-parent="#faqAccordion">
                                <div class="accordion-body">
                                    <p>No, SPADE includes a custom XMPP server (pyjabber) that you can use out of the box for development and testing. This means you can get started with SPADE without setting up any additional infrastructure.</p>
                                    <p>However, for production environments or specific requirements, SPADE is compatible with any standard XMPP server like Prosody, ejabberd, or Openfire. This flexibility allows you to choose the best option for your specific deployment needs.</p>
                                </div>
                            </div>
                        </div>
                        <div class="accordion-item border-0 mb-3 shadow-sm">
                            <h2 class="accordion-header" id="headingThree">
                                <button class="accordion-button collapsed" type="button" data-bs-toggle="collapse" data-bs-target="#collapseThree" aria-expanded="false" aria-controls="collapseThree">
                                    What types of behaviors can SPADE agents have?
                                </button>
                            </h2>
                            <div id="collapseThree" class="accordion-collapse collapse" aria-labelledby="headingThree" data-bs-parent="#faqAccordion">
                                <div class="accordion-body">
                                    <p>SPADE provides several types of predefined behaviors to help you implement different agent tasks:</p>
                                    <ul>
                                        <li><strong>CyclicBehaviour</strong>: Executes repeatedly without end</li>
                                        <li><strong>PeriodicBehaviour</strong>: Executes at regular time intervals</li>
                                        <li><strong>OneShotBehaviour</strong>: Executes only once</li>
                                        <li><strong>TimeoutBehaviour</strong>: Executes after a specified time delay</li>
                                        <li><strong>FSMBehaviour</strong>: Implements a Finite State Machine for complex behavior patterns</li>
                                    </ul>
                                    <p>These behavior types can be combined and nested to create sophisticated agent logic, and each behavior can have its own message template to handle specific types of incoming communications.</p>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </section>

    <!-- Statistics Section -->
    <section class="stats-section py-5">
        <div class="container">
            <div class="row text-center">
                <div class="col-md-3">
                    <div class="stat-item">
                        <div class="stat-number">10K+</div>
                        <div class="stat-label">Downloads</div>
                    </div>
                </div>
                <div class="col-md-3">
                    <div class="stat-item">
                        <div class="stat-number">50+</div>
                        <div class="stat-label">Contributors</div>
                    </div>
                </div>
                <div class="col-md-3">
                    <div class="stat-item">
                        <div class="stat-number">100+</div>
                        <div class="stat-label">Forks</div>
                    </div>
                </div>
                <div class="col-md-3">
                    <div class="stat-item">
                        <div class="stat-number">5+</div>
                        <div class="stat-label">Plugins</div>
                    </div>
                </div>
            </div>
        </div>
    </section>

    <!-- News Section -->
    <section class="py-5 bg-light">
        <div class="container">
            <div class="text-center mb-5">
                <h2 class="fw-bold">Latest News</h2>
                <p class="lead text-muted">Stay updated with the latest SPADE developments</p>
            </div>
            <div class="row g-4" id="news-container">
                <!-- News will be loaded dynamically -->
                <div class="col-md-4 mb-4">
                    <div class="card h-100">
                        <div class="card-body">
                            <h6 class="card-title">SPADE 3.3.0 Released</h6>
                            <p class="card-text small">New features include improved async support and better error handling.</p>
                            <small class="text-muted">2024-01-15</small>
                        </div>
                    </div>
                </div>
                <div class="col-md-4 mb-4">
                    <div class="card h-100">
                        <div class="card-body">
                            <h6 class="card-title">New BDI Plugin Available</h6>
                            <p class="card-text small">Enhanced BDI capabilities with improved AgentSpeak support.</p>
                            <small class="text-muted">2024-01-10</small>
                        </div>
                    </div>
                </div>
                <div class="col-md-4 mb-4">
                    <div class="card h-100">
                        <div class="card-body">
                            <h6 class="card-title">Documentation Updated</h6>
                            <p class="card-text small">Comprehensive tutorials and examples now available.</p>
                            <small class="text-muted">2024-01-05</small>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </section>

    <Footer />
</BaseLayout>
