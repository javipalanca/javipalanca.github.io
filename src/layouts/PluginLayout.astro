---
export interface Props {
  title: string;
  description?: string;
  pluginName: string;
  version?: string;
  githubUrl: string;
  docsUrl: string;
  featured?: boolean;
}

const { 
  title, 
  description = 'SPADE plugin for enhanced agent capabilities',
  pluginName,
  version,
  githubUrl,
  docsUrl,
  featured = false
} = Astro.props;

// Import global styles and get base path
import '../styles/global.css';
const baseUrl = import.meta.env.BASE_URL;
---

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <meta name="description" content={description}>
    <meta name="keywords" content="SPADE, Python, Plugin, Multi-agent, XMPP, Agent-based, MAS">
    <meta name="author" content="SPADE Team">
    <meta name="astro-base-url" content={baseUrl}>
    <title>{title}</title>
    
    <!-- Bootstrap CSS -->
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css">
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.11.0/font/bootstrap-icons.css">
    
    <!-- Prism.js for syntax highlighting -->
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/prism/1.29.0/themes/prism-okaidia.min.css">
    
    <!-- Custom Prism.js styling for light/dark mode -->
    <style>
        /* Basic container styling - let Prism handle syntax colors */
        pre[class*="language-"] {
            border-radius: 6px;
            border: 1px solid #e9ecef;
            font-size: 14px;
            line-height: 1.4;
        }
        
        /* Dark mode container adjustments */
        body.dark-mode pre[class*="language-"] {
            border: 1px solid #333 !important;
        }
        
        /* Copy button styling */
        .code-block-container {
            position: relative;
        }
        
        .copy-button {
            position: absolute;
            top: 8px;
            right: 8px;
            background: rgba(255, 255, 255, 0.8);
            border: 1px solid #ddd;
            border-radius: 4px;
            padding: 4px 8px;
            font-size: 12px;
            cursor: pointer;
            z-index: 10;
        }
        
        .copy-button:hover {
            background: rgba(255, 255, 255, 0.9);
        }
        
        body.dark-mode .copy-button {
            background: rgba(0, 0, 0, 0.8);
            border-color: #555;
            color: #fff;
        }
        
        body.dark-mode .copy-button:hover {
            background: rgba(0, 0, 0, 0.9);
        }

        /* Plugin page specific styles */
        .plugin-hero {
            background: linear-gradient(135deg, var(--primary-color), var(--secondary-color));
            color: white;
            padding: 6rem 0 4rem 0;
            margin-top: 76px; /* Account for fixed navbar */
        }

        .featured-plugin-hero {
            background: linear-gradient(135deg, #8e44ad, #9b59b6);
        }

        .plugin-badges {
            display: flex;
            gap: 0.5rem;
            flex-wrap: wrap;
            margin-top: 1rem;
        }

        .plugin-badge {
            background: rgba(255, 255, 255, 0.2);
            color: white;
            padding: 0.25rem 0.75rem;
            border-radius: 15px;
            font-size: 0.875rem;
            font-weight: 500;
        }

        .plugin-actions {
            margin-top: 2rem;
            display: flex;
            gap: 1rem;
            flex-wrap: wrap;
        }

        .btn-plugin-primary {
            background: rgba(255, 255, 255, 0.2);
            color: white;
            border: 2px solid rgba(255, 255, 255, 0.3);
            padding: 0.75rem 2rem;
            font-weight: 600;
            transition: all 0.3s ease;
        }

        .btn-plugin-primary:hover {
            background: white;
            color: var(--primary-color);
            transform: translateY(-2px);
        }

        .featured-plugin .btn-plugin-primary:hover {
            color: #8e44ad;
        }

        .plugin-nav {
            background: white;
            border-bottom: 1px solid #e9ecef;
            position: sticky;
            top: 76px;
            z-index: 1000;
        }

        body.dark-mode .plugin-nav {
            background: var(--dark-card-bg);
            border-bottom-color: #333;
        }

        .plugin-nav .nav-link {
            color: #6c757d;
            font-weight: 500;
            padding: 1rem 1.5rem;
            border-bottom: 3px solid transparent;
            transition: all 0.3s ease;
        }

        .plugin-nav .nav-link:hover,
        .plugin-nav .nav-link.active {
            color: var(--primary-color);
            border-bottom-color: var(--primary-color);
        }

        .featured-plugin .plugin-nav .nav-link:hover,
        .featured-plugin .plugin-nav .nav-link.active {
            color: #8e44ad;
            border-bottom-color: #8e44ad;
        }

        body.dark-mode .plugin-nav .nav-link {
            color: #adb5bd;
        }

        body.dark-mode .plugin-nav .nav-link:hover,
        body.dark-mode .plugin-nav .nav-link.active {
            color: #3498db;
        }

        .plugin-section {
            padding: 4rem 0;
        }

        .plugin-feature-card {
            background: white;
            border: 1px solid #e9ecef;
            border-radius: 10px;
            padding: 2rem;
            height: 100%;
            transition: all 0.3s ease;
        }

        .plugin-feature-card:hover {
            transform: translateY(-5px);
            box-shadow: 0 10px 30px rgba(0, 0, 0, 0.1);
        }

        body.dark-mode .plugin-feature-card {
            background: var(--dark-card-bg);
            border-color: #333;
        }

        .plugin-icon {
            width: 60px;
            height: 60px;
            background: linear-gradient(45deg, var(--primary-color), var(--secondary-color));
            border-radius: 12px;
            display: flex;
            align-items: center;
            justify-content: center;
            color: white;
            font-size: 1.5rem;
            margin-bottom: 1rem;
        }

        .featured-plugin .plugin-icon {
            background: linear-gradient(45deg, #8e44ad, #9b59b6);
        }

        .plugin-code-example {
            background: #f8f9fa;
            border-radius: 10px;
            padding: 1.5rem;
            margin: 2rem 0;
        }

        body.dark-mode .plugin-code-example {
            background: var(--dark-card-bg);
        }
    </style>
    
    <!-- Favicon -->
    <link rel="icon" type="image/svg+xml" href={`${baseUrl}img/favicon-spade-new.svg`}>
    <link rel="icon" type="image/png" href={`${baseUrl}img/spade_friend.png`}>
    
    <!-- Open Graph / Social Media Meta Tags -->
    <meta property="og:title" content={title}>
    <meta property="og:description" content={description}>
    <meta property="og:image" content={`${baseUrl}img/spade_index.png`}>
    <meta property="og:url" content="https://github.com/javipalanca/spade">
</head>
<body class={featured ? 'featured-plugin' : ''}>
    <slot />
    
    <!-- Bootstrap JS -->
    <script is:inline src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
    
    <!-- Prism.js -->
    <script is:inline src="https://cdnjs.cloudflare.com/ajax/libs/prism/1.29.0/prism.min.js"></script>
    <script is:inline src="https://cdnjs.cloudflare.com/ajax/libs/prism/1.29.0/components/prism-python.min.js"></script>
    <script is:inline src="https://cdnjs.cloudflare.com/ajax/libs/prism/1.29.0/components/prism-bash.min.js"></script>
    <script is:inline src="https://cdnjs.cloudflare.com/ajax/libs/prism/1.29.0/components/prism-yaml.min.js"></script>
    <script is:inline src="https://cdnjs.cloudflare.com/ajax/libs/prism/1.29.0/components/prism-json.min.js"></script>
    
    <!-- Custom Scripts -->
    <script is:inline>
        // Global dark mode toggle function
        window.toggleDarkMode = function() {
            const body = document.body;
            const icon = document.getElementById('darkModeIcon');
            
            body.classList.toggle('dark-mode');
            const isDarkMode = body.classList.contains('dark-mode');
            
            localStorage.setItem('darkMode', isDarkMode.toString());
            
            if (icon) {
                if (isDarkMode) {
                    icon.className = 'bi bi-sun-fill';
                } else {
                    icon.className = 'bi bi-moon-fill';
                }
            }
            
            if (typeof rehighlightCode === 'function') {
                rehighlightCode();
            }
        };

        // Initialize everything when DOM is ready
        document.addEventListener('DOMContentLoaded', function() {
            // Initialize dark mode state
            const savedDarkMode = localStorage.getItem('darkMode');
            const icon = document.getElementById('darkModeIcon');
            const body = document.body;
            
            if (savedDarkMode === 'true') {
                body.classList.add('dark-mode');
                if (icon) {
                    icon.className = 'bi bi-sun-fill';
                }
            } else {
                body.classList.remove('dark-mode');
                if (icon) {
                    icon.className = 'bi bi-moon-fill';
                }
            }
            
            // Navbar scroll effect
            window.addEventListener('scroll', function() {
                const navbar = document.querySelector('.navbar');
                if (navbar) {
                    if (window.scrollY > 50) {
                        navbar.classList.add('scrolled');
                    } else {
                        navbar.classList.remove('scrolled');
                    }
                }
            });

            // Plugin navigation smooth scrolling
            initializePluginNavigation();
            
            // Initialize scroll animations
            initializeScrollAnimations();

            // Initialize syntax highlighting
            if (typeof window.Prism !== 'undefined') {
                window.Prism.highlightAll();
            }
        });

        // Plugin navigation functionality
        function initializePluginNavigation() {
            const navLinks = document.querySelectorAll('.plugin-nav .nav-link');
            const sections = document.querySelectorAll('.plugin-section[id]');

            // Update active nav item on scroll
            const observer = new IntersectionObserver((entries) => {
                entries.forEach(entry => {
                    if (entry.isIntersecting) {
                        const id = entry.target.id;
                        navLinks.forEach(link => {
                            link.classList.remove('active');
                            if (link.getAttribute('href') === `#${id}`) {
                                link.classList.add('active');
                            }
                        });
                    }
                });
            }, {
                rootMargin: '-20% 0px -60% 0px',
                threshold: 0.1
            });

            sections.forEach(section => {
                observer.observe(section);
            });

            // Smooth scrolling for nav links
            navLinks.forEach(link => {
                link.addEventListener('click', function(e) {
                    e.preventDefault();
                    const targetId = this.getAttribute('href').substring(1);
                    const targetSection = document.getElementById(targetId);
                    if (targetSection) {
                        const navHeight = document.querySelector('.plugin-nav').offsetHeight + 76; // navbar + plugin nav
                        const targetPosition = targetSection.offsetTop - navHeight;
                        window.scrollTo({
                            top: targetPosition,
                            behavior: 'smooth'
                        });
                    }
                });
            });
        }

        // Scroll-triggered animations
        function initializeScrollAnimations() {
            const animatedElements = document.querySelectorAll(
                '.animate-on-scroll, .fade-in-up, .scale-in, .slide-in-left, .slide-in-right'
            );

            if (animatedElements.length === 0) return;

            const animationObserver = new IntersectionObserver((entries) => {
                entries.forEach(entry => {
                    if (entry.isIntersecting) {
                        entry.target.classList.add('animate-in');
                    }
                });
            }, {
                root: null,
                rootMargin: '0px 0px -100px 0px',
                threshold: 0.1
            });

            animatedElements.forEach(element => {
                animationObserver.observe(element);
            });
        }

        // Copy code functionality
        function copyCode(button) {
            const codeBlock = button.parentElement.querySelector('code');
            const text = codeBlock.textContent;
            
            navigator.clipboard.writeText(text).then(() => {
                const originalText = button.textContent;
                button.textContent = 'Copied!';
                button.classList.add('btn-success');
                
                setTimeout(() => {
                    button.textContent = originalText;
                    button.classList.remove('btn-success');
                }, 2000);
            });
        }

        // Make copy function available globally
        window.copyCode = copyCode;
    </script>
</body>
</html>