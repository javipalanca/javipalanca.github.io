---
export interface Props {
  title: string;
  description?: string;
}

const { title, description = 'SPADE - Smart Python Agent Development Environment. A multi-agent systems platform written in Python and based on XMPP.' } = Astro.props;

// Import global styles and get base path
import '../styles/global.css';
const baseUrl = import.meta.env.BASE_URL;
---

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <meta name="description" content={description}>
    <meta name="keywords" content="SPADE, Python, Multi-agent, XMPP, Agent-based, MAS">
    <meta name="author" content="SPADE Team">
    <meta name="astro-base-url" content={baseUrl}>
    <title>{title}</title>
    
    <!-- Bootstrap CSS -->
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css">
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.11.0/font/bootstrap-icons.css">
    
    <!-- Prism.js for syntax highlighting -->
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/prism/1.29.0/themes/prism-okaidia.min.css">
    
    <!-- Vis.js Network for interactive demos -->
    <script src="https://unpkg.com/vis-network/standalone/umd/vis-network.min.js"></script>
    
    <!-- Custom Prism.js styling for light/dark mode -->
    <style>
        /* Basic container styling - let Prism handle syntax colors */
        pre[class*="language-"] {
            border-radius: 6px;
            border: 1px solid #e9ecef;
            font-size: 14px;
            line-height: 1.4;
        }
        
        /* Dark mode container adjustments */
        body.dark-mode pre[class*="language-"] {
            border: 1px solid #333 !important;
        }
        
        /* Copy button styling */
        .code-block-container {
            position: relative;
        }
        
        .copy-button {
            position: absolute;
            top: 8px;
            right: 8px;
            background: rgba(255, 255, 255, 0.8);
            border: 1px solid #ddd;
            border-radius: 4px;
            padding: 4px 8px;
            font-size: 12px;
            cursor: pointer;
            z-index: 10;
        }
        
        .copy-button:hover {
            background: rgba(255, 255, 255, 0.9);
        }
        
        body.dark-mode .copy-button {
            background: rgba(0, 0, 0, 0.8);
            border-color: #555;
            color: #fff;
        }
        
        body.dark-mode .copy-button:hover {
            background: rgba(0, 0, 0, 0.9);
        }
    </style>

    <!-- Google tag (gtag.js) -->
    <script async src="https://www.googletagmanager.com/gtag/js?id=G-RMF8G34S68"></script>
    <script>
        window.dataLayer = window.dataLayer || [];
        function gtag(){dataLayer.push(arguments);}
        gtag('js', new Date());
      
        gtag('config', 'G-RMF8G34S68');
    </script>

    <!-- Favicon -->
    <link rel="icon" type="image/svg+xml" href={`${baseUrl}img/favicon-spade-new.svg`}>
    <link rel="icon" type="image/png" href={`${baseUrl}img/spade_friend.png`}>
    
    <!-- Open Graph / Social Media Meta Tags -->
    <meta property="og:title" content={title}>
    <meta property="og:description" content={description}>
    <meta property="og:image" content={`${baseUrl}img/spade_index.png`}>
    <meta property="og:url" content="https://github.com/javipalanca/spade">
    <meta name="astro-base-url" content={import.meta.env.BASE_URL || '/'}>
    
    <!-- Custom CSS will be injected by Astro from the import above -->
</head>
<body>
    <slot />
    
    <!-- Bootstrap JS -->
    <script is:inline src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
    
    <!-- Prism.js -->
    <script is:inline src="https://cdnjs.cloudflare.com/ajax/libs/prism/1.29.0/prism.min.js"></script>
    <script is:inline src="https://cdnjs.cloudflare.com/ajax/libs/prism/1.29.0/components/prism-python.min.js"></script>
    <script is:inline src="https://cdnjs.cloudflare.com/ajax/libs/prism/1.29.0/components/prism-bash.min.js"></script>
    <script is:inline src="https://cdnjs.cloudflare.com/ajax/libs/prism/1.29.0/components/prism-yaml.min.js"></script>
    <script is:inline src="https://cdnjs.cloudflare.com/ajax/libs/prism/1.29.0/components/prism-json.min.js"></script>
    
    <!-- Custom Scripts -->
    <script is:inline>
        // Global dark mode toggle function - available immediately
        window.toggleDarkMode = function() {
            const body = document.body;
            const icon = document.getElementById('darkModeIcon');
            
            // Toggle the class
            body.classList.toggle('dark-mode');
            const isDarkMode = body.classList.contains('dark-mode');
            
            // Save preference
            localStorage.setItem('darkMode', isDarkMode.toString());
            
            // Update logos if function is available
            if (typeof window.updateLogos === 'function') {
                window.updateLogos(isDarkMode);
            }
            
            // Update icon immediately
            if (icon) {
                if (isDarkMode) {
                    icon.className = 'bi bi-sun-fill';
                } else {
                    icon.className = 'bi bi-moon-fill';
                }
            }
            
            // Re-highlight code with new theme
            if (typeof rehighlightCode === 'function') {
                rehighlightCode();
            }
        };

        // Also make it available as a regular function for compatibility
        function toggleDarkMode() {
            window.toggleDarkMode();
        }

        // Initialize everything when DOM is ready
        document.addEventListener('DOMContentLoaded', function() {
            // Initialize dark mode state
            const savedDarkMode = localStorage.getItem('darkMode');
            const icon = document.getElementById('darkModeIcon');
            const body = document.body;
            
            // Apply saved preference or default to light mode
            if (savedDarkMode === 'true') {
                body.classList.add('dark-mode');
                if (icon) {
                    icon.className = 'bi bi-sun-fill';
                }
                // Update logos on load
                if (typeof window.updateLogos === 'function') {
                    window.updateLogos(true);
                }
            } else {
                body.classList.remove('dark-mode');
                if (icon) {
                    icon.className = 'bi bi-moon-fill';
                }
                // Update logos on load
                if (typeof window.updateLogos === 'function') {
                    window.updateLogos(false);
                }
            }
            
            // Navbar scroll effect
            window.addEventListener('scroll', function() {
                const navbar = document.querySelector('.navbar');
                if (navbar) {
                    if (window.scrollY > 50) {
                        navbar.classList.add('scrolled');
                    } else {
                        navbar.classList.remove('scrolled');
                    }
                }
            });
        });

        // Load demos and news dynamically
        async function loadDemos() {
            try {
                // Get base URL from meta tag instead of import.meta
                const baseUrl = document.querySelector('meta[name="astro-base-url"]')?.getAttribute('content') || '/';
                const response = await fetch(`${baseUrl}json/demos.json`);
                const demosData = await response.json();
                const demos = demosData.demos || [];
                const container = document.getElementById('demos-container');
                if (container && demos.length > 0) {
                    const demoCards = demos.map((demo) => `
                        <div class="col-md-6 col-lg-4 mb-4">
                            <div class="demo-card">
                                <div class="demo-thumbnail">
                                    <i class="bi bi-${demo.icon || 'code-square'}"></i>
                                </div>
                                <div class="p-4">
                                    <h5 class="fw-bold">${demo.title}</h5>
                                    <p class="text-muted">${demo.description}</p>
                                    <div class="d-flex justify-content-between align-items-center">
                                        <small class="text-muted">
                                            <i class="bi bi-star-fill text-warning"></i>
                                            Difficulty: ${demo.difficulty}
                                        </small>
                                        <a href="${demo.url}" class="btn btn-sm btn-outline-primary" target="_blank">
                                            View Demo
                                        </a>
                                    </div>
                                </div>
                            </div>
                        </div>
                    `).join('');
                    
                    container.innerHTML = demoCards;
                }
            } catch (error) {
                console.log('Demos not available:', error);
            }
        }

        async function loadNews() {
            try {
                // Get base URL from meta tag instead of import.meta
                const baseUrl = document.querySelector('meta[name="astro-base-url"]')?.getAttribute('content') || '/';
                const response = await fetch(`${baseUrl}json/news.json`);
                const newsData = await response.json();
                const news = newsData.news || [];
                const container = document.getElementById('news-container');
                if (container && news.length > 0) {
                    const newsCards = news.slice(0, 3).map((item) => `
                        <div class="col-md-4 mb-4">
                            <div class="card h-100">
                                <div class="card-body">
                                    <h6 class="card-title">${item.title}</h6>
                                    <p class="card-text small">${item.description}</p>
                                    <small class="text-muted">${new Date(item.date).toLocaleDateString()}</small>
                                </div>
                            </div>
                        </div>
                    `).join('');
                    container.innerHTML = newsCards;
                }
            } catch (error) {
                console.log('News not available:', error);
            }
        }

        // Load dynamic content
        function loadDynamicContent() {
            loadDemos();
            loadNews();
            
            // Initialize Prism.js syntax highlighting with delay
            setTimeout(() => {
                if (typeof window.Prism !== 'undefined') {
                    console.log('Initializing Prism.js...');
                    window.Prism.highlightAll();
                } else {
                    console.warn('Prism.js not available');
                }
            }, 100);
        }

        // Re-highlight code when dark mode is toggled
        function rehighlightCode() {
            setTimeout(() => {
                if (typeof window.rehighlightCode === 'function') {
                    window.rehighlightCode();
                    console.log('Code re-highlighted for new theme');
                }
            }, 50);
        }

        // Make functions available globally
        window.toggleDarkMode = toggleDarkMode;

        // Load dynamic content when DOM is ready
        document.addEventListener('DOMContentLoaded', loadDynamicContent);
    </script>
    
    <!-- Prism.js initialization -->
    <script src={`${baseUrl}js/prism-init.js`} is:inline></script>
    
    <!-- Custom JS - separated for better maintainability -->
    <script src={`${baseUrl}js/scripts.js`} is:inline></script>
    <!-- Interactive Agent Demo - separated from main scripts.js on May 25, 2025 -->
    <script src={`${baseUrl}js/demos.js`} is:inline></script>
    <!-- Final verification script -->
    <script src={`${baseUrl}js/final-test.js`} is:inline></script>
</body>
</html>
