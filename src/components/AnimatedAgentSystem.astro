---
// AnimatedAgentSystem component
---

<div class="agent-system">
    <div class="agents-container">
        <!-- Agent 1 - Coordinator -->
        <div class="agent-node" data-agent="coordinator" data-node-id="agent1">
            <div class="connection-points">
                <div class="connection-point" data-direction="right"></div>
                <div class="connection-point" data-direction="bottom"></div>
                <div class="connection-point" data-direction="left"></div>
                <div class="connection-point" data-direction="top"></div>
            </div>
            <div class="agent-avatar">
                <div class="robot-head">
                    <div class="robot-eyes">
                        <div class="eye"></div>
                        <div class="eye"></div>
                    </div>
                    <div class="robot-mouth"></div>
                </div>
            </div>
            <div class="agent-info">
                <h4 class="agent-name">Agent 1</h4>
                <div class="agent-status unavailable">Unavailable</div>
            </div>
            <div class="agent-behaviour">
                <span class="behaviour-type">oneshot</span>
            </div>
        </div>

        <!-- Agent 2 - Processor -->
        <div class="agent-node" data-agent="processor" data-node-id="agent2">
            <div class="connection-points">
                <div class="connection-point" data-direction="right"></div>
                <div class="connection-point" data-direction="bottom"></div>
                <div class="connection-point" data-direction="left"></div>
                <div class="connection-point" data-direction="top"></div>
            </div>
            <div class="agent-avatar">
                <div class="robot-head">
                    <div class="robot-eyes">
                        <div class="eye"></div>
                        <div class="eye"></div>
                    </div>
                    <div class="robot-mouth"></div>
                </div>
            </div>
            <div class="agent-info">
                <h4 class="agent-name">Agent 2</h4>
                <div class="agent-status available">Available</div>
            </div>
            <div class="agent-behaviour">
                <span class="behaviour-type">cyclic</span>
            </div>
            <div class="agent-features">
                <span class="feature">spade_artifact connection</span>
            </div>
        </div>

        <!-- Agent 3 - Monitor -->
        <div class="agent-node" data-agent="monitor" data-node-id="agent3">
            <div class="connection-points">
                <div class="connection-point" data-direction="right"></div>
                <div class="connection-point" data-direction="bottom"></div>
                <div class="connection-point" data-direction="left"></div>
                <div class="connection-point" data-direction="top"></div>
            </div>
            <div class="agent-avatar">
                <div class="robot-head">
                    <div class="robot-eyes">
                        <div class="eye"></div>
                        <div class="eye"></div>
                    </div>
                    <div class="robot-mouth"></div>
                </div>
            </div>
            <div class="agent-info">
                <h4 class="agent-name">Agent 3</h4>
                <div class="agent-status available">Available</div>
            </div>
            <div class="agent-behaviour">
                <span class="behaviour-type">LLMBehaviour</span>
            </div>
            <div class="agent-features">
                <span class="feature">Guardrails</span>
                <span class="feature">MCP Connection</span>
            </div>
        </div>

        <!-- Agent 4 - Executor -->
        <div class="agent-node" data-agent="executor" data-node-id="agent4">
            <div class="connection-points">
                <div class="connection-point" data-direction="right"></div>
                <div class="connection-point" data-direction="bottom"></div>
                <div class="connection-point" data-direction="left"></div>
                <div class="connection-point" data-direction="top"></div>
            </div>
            <div class="agent-avatar">
                <div class="robot-head">
                    <div class="robot-eyes">
                        <div class="eye"></div>
                        <div class="eye"></div>
                    </div>
                    <div class="robot-mouth"></div>
                </div>
            </div>
            <div class="agent-info">
                <h4 class="agent-name">Agent 4</h4>
                <div class="agent-status available">Available</div>
            </div>
            <div class="agent-behaviour">
                <span class="behaviour-type">LLMBehaviour</span>
            </div>
            <div class="agent-features">
                <span class="feature">Memory DB</span>
                <span class="feature">Context Store</span>
            </div>
        </div>


        <!-- Central Services -->
        <div class="central-services">
            <div class="service-node mcp-service" data-node-id="mcp-server">
                <div class="connection-points">
                    <div class="connection-point" data-direction="right"></div>
                    <div class="connection-point" data-direction="bottom"></div>
                    <div class="connection-point" data-direction="left"></div>
                    <div class="connection-point" data-direction="top"></div>
                </div>
                <div class="service-icon">
                    <div class="service-body">
                        <div class="service-lights">
                            <div class="light"></div>
                            <div class="light"></div>
                            <div class="light"></div>
                        </div>
                    </div>
                </div>
                <div class="service-info">
                    <h4 class="service-name">MCP Server</h4>
                    <div class="service-status">HTTP Streaming</div>
                </div>
            </div>
            
            <div class="service-node fiware-service" data-node-id="fiware-iot">
                <div class="connection-points">
                    <div class="connection-point" data-direction="right"></div>
                    <div class="connection-point" data-direction="bottom"></div>
                    <div class="connection-point" data-direction="left"></div>
                    <div class="connection-point" data-direction="top"></div>
                </div>
                <div class="service-icon">
                    <div class="service-body fiware-body">
                        <div class="fiware-symbol">IoT</div>
                    </div>
                </div>
                <div class="service-info">
                    <h4 class="service-name">FIWARE IoT Artifact</h4>
                    <div class="service-status">Connected</div>
                </div>
            </div>
        </div>

        <!-- Dynamic Connections Canvas -->
        <svg class="connections-canvas" width="100%" height="100%">
            <!-- Connections will be dynamically created here -->
            <g class="connections-group"></g>
            <!-- Temporary connection line while dragging -->
            <line class="temp-connection" x1="0" y1="0" x2="0" y2="0" stroke="#666" stroke-width="2" stroke-dasharray="5,5" opacity="0" pointer-events="none"/>
            
            <!-- Gradients for connections -->
            <defs>
                <linearGradient id="connectionGradient" x1="0%" y1="0%" x2="100%" y2="0%">
                    <stop offset="0%" style="stop-color:#64b5f6;stop-opacity:1" />
                    <stop offset="100%" style="stop-color:#42a5f5;stop-opacity:1" />
                </linearGradient>
                <linearGradient id="pubsubGradient" x1="0%" y1="0%" x2="100%" y2="0%">
                    <stop offset="0%" style="stop-color:#00bcd4;stop-opacity:1" />
                    <stop offset="100%" style="stop-color:#0097a7;stop-opacity:1" />
                </linearGradient>
                <!-- Simplified arrow markers -->
                <marker id="arrowhead" markerWidth="6" markerHeight="6" refX="5" refY="3" orient="auto">
                    <circle cx="3" cy="3" r="3" fill="#64b5f6"/>
                </marker>
                <marker id="arrowhead-pubsub" markerWidth="6" markerHeight="6" refX="5" refY="3" orient="auto">
                    <circle cx="3" cy="3" r="3" fill="#00bcd4"/>
                </marker>
                <marker id="arrowhead-mcp" markerWidth="6" markerHeight="6" refX="5" refY="3" orient="auto">
                    <circle cx="3" cy="3" r="3" fill="#ff6b6b"/>
                </marker>
            </defs>
        </svg>

        <!-- Connection Controls -->
        <div class="connection-controls">
            <button class="control-btn clear-connections" title="Borrar todas las conexiones">
                <svg width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                    <path d="M3 6h18M8 6V4a2 2 0 0 1 2-2h4a2 2 0 0 1 2 2v2M19 6v14a2 2 0 0 1-2 2H7a2 2 0 0 1-2-2V6"/>
                </svg>
            </button>
        </div>
    </div>
</div>

<!-- Interactive Instructions -->
<div class="interactive-instructions">
    <div class="instruction-content">
        <div class="instruction-icon">ðŸ‘†</div>
        <p>Make your own connections and create your multi-agent system</p>
    </div>
</div>

<style>
    .agent-system {
        position: relative;
        width: 100%;
        max-width: 1200px;
        height: 700px;
        background: linear-gradient(145deg, #f8f9fa 0%, #e9ecef 100%);
        border-radius: 20px;
        overflow: hidden;
        box-shadow: 0 10px 30px rgba(0, 0, 0, 0.1);
        border: 1px solid rgba(255, 255, 255, 0.2);
        margin: 0 auto;
    }

    .agents-container {
        position: relative;
        width: 100%;
        height: 100%;
        padding: 60px 80px;
    }

    .agent-node {
        position: absolute;
        background: rgba(255, 255, 255, 0.95);
        border-radius: 16px;
        padding: 15px;
        box-shadow: 0 8px 25px rgba(0, 0, 0, 0.08);
        border: 1px solid rgba(255, 255, 255, 0.8);
        backdrop-filter: blur(10px);
        transition: all 0.3s ease;
        width: 220px;
        text-align: center;
        animation: float 6s ease-in-out infinite;
    }

    .agent-node:hover {
        transform: translateY(-5px);
        box-shadow: 0 15px 35px rgba(0, 0, 0, 0.15);
    }

    .agent-node[data-agent="coordinator"] {
        top: 20px;
        left: 20px;
        animation-delay: 0s;
    }

    .agent-node[data-agent="processor"] {
        top: 20px;
        right: 20px;
        animation-delay: 1.5s;
    }

    .agent-node[data-agent="monitor"] {
        bottom: 20px;
        left: 20px;
        animation-delay: 3s;
    }

    .agent-node[data-agent="executor"] {
        bottom: 20px;
        right: 20px;
        animation-delay: 4.5s;
    }

    .central-services {
        position: absolute;
        top: 50%;
        left: 50%;
        transform: translate(-50%, -50%);
        display: flex;
        gap: 40px;
        align-items: center;
    }

    .service-node {
        background: rgba(255, 255, 255, 0.95);
        border-radius: 16px;
        padding: 15px;
        box-shadow: 0 8px 25px rgba(0, 0, 0, 0.08);
        backdrop-filter: blur(10px);
        transition: all 0.3s ease;
        width: 160px;
        text-align: center;
        animation: serviceFloat 6s ease-in-out infinite;
    }

    .service-node:hover {
        transform: translateY(-5px);
        box-shadow: 0 15px 35px rgba(0, 0, 0, 0.15);
    }

    .mcp-service {
        border: 2px solid #ff6b6b;
        animation-delay: 0s;
    }

    .fiware-service {
        border: 2px solid #00bcd4;
        animation-delay: 3s;
    }

    .agent-avatar {
        margin-bottom: 12px;
    }

    .robot-head {
        width: 50px;
        height: 50px;
        background: linear-gradient(145deg, #667eea 0%, #764ba2 100%);
        border-radius: 12px;
        margin: 0 auto;
        position: relative;
        display: flex;
        align-items: center;
        justify-content: center;
        flex-direction: column;
        box-shadow: 0 4px 15px rgba(102, 126, 234, 0.3);
        animation: robotPulse 2s ease-in-out infinite;
    }

    .robot-eyes {
        display: flex;
        gap: 8px;
        margin-bottom: 4px;
    }

    .eye {
        width: 8px;
        height: 8px;
        background: #fff;
        border-radius: 50%;
        animation: blink 3s infinite;
    }

    .robot-mouth {
        width: 12px;
        height: 2px;
        background: #fff;
        border-radius: 1px;
        opacity: 0.8;
    }

    .agent-info {
        margin-bottom: 10px;
    }

    .agent-name {
        font-size: 14px;
        font-weight: 600;
        color: #2c3e50;
        margin: 0 0 4px 0;
    }

    .agent-status {
        font-size: 11px;
        padding: 2px 8px;
        border-radius: 10px;
        display: inline-block;
        font-weight: 500;
    }

    .agent-status.available {
        color: #27ae60;
        background: rgba(39, 174, 96, 0.1);
    }

    .agent-status.unavailable {
        color: #e74c3c;
        background: rgba(231, 76, 60, 0.1);
    }

    .agent-behaviour {
        display: flex;
        flex-direction: column;
        gap: 4px;
    }

    .behaviour-type {
        font-size: 10px;
        color: #6c757d;
        background: rgba(108, 117, 125, 0.1);
        padding: 2px 6px;
        border-radius: 6px;
        font-weight: 500;
        text-align: center;
    }

    .agent-features {
        display: flex;
        flex-direction: column;
        gap: 3px;
        margin-top: 8px;
    }

    .feature {
        font-size: 9px;
        color: #8e44ad;
        background: rgba(142, 68, 173, 0.1);
        padding: 2px 6px;
        border-radius: 6px;
        font-weight: 500;
        text-align: center;
    }

    .service-icon {
        margin-bottom: 8px;
    }

    .service-body {
        width: 40px;
        height: 30px;
        border-radius: 8px;
        margin: 0 auto;
        position: relative;
        display: flex;
        align-items: center;
        justify-content: center;
        box-shadow: 0 4px 15px rgba(0, 0, 0, 0.2);
    }

    .service-body {
        background: linear-gradient(145deg, #ff6b6b 0%, #ffa726 100%);
    }

    .fiware-body {
        background: linear-gradient(145deg, #00bcd4 0%, #0097a7 100%);
    }

    .service-lights {
        display: flex;
        gap: 3px;
    }

    .light {
        width: 4px;
        height: 4px;
        background: #fff;
        border-radius: 50%;
        animation: serviceBlink 1.5s infinite;
    }

    .light:nth-child(2) {
        animation-delay: 0.5s;
    }

    .light:nth-child(3) {
        animation-delay: 1s;
    }

    .fiware-symbol {
        color: #fff;
        font-size: 12px;
        font-weight: bold;
    }

    .service-name {
        font-size: 12px;
        font-weight: 600;
        color: #2c3e50;
        margin: 0 0 4px 0;
    }

    .service-status {
        font-size: 10px;
        padding: 2px 6px;
        border-radius: 8px;
        display: inline-block;
        font-weight: 500;
    }

    .mcp-service .service-status {
        color: #ff6b6b;
        background: rgba(255, 107, 107, 0.1);
    }

    .fiware-service .service-status {
        color: #00bcd4;
        background: rgba(0, 188, 212, 0.1);
    }

    .connection-points {
        position: absolute;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        pointer-events: none;
    }

    .connection-point {
        position: absolute;
        width: 12px;
        height: 12px;
        background: #4CAF50;
        border-radius: 50%;
        cursor: pointer;
        opacity: 0;
        transition: opacity 0.2s ease;
        pointer-events: all;
        z-index: 10;
        border: 2px solid #fff;
        box-shadow: 0 2px 4px rgba(0,0,0,0.2);
    }

    .connection-point:hover {
        opacity: 1;
        transform: scale(1.2);
    }

    .agent-node:hover .connection-point,
    .service-node:hover .connection-point {
        opacity: 0.7;
    }

    .connection-point[data-direction="right"] {
        right: -6px;
        top: 50%;
        transform: translateY(-50%);
    }

    .connection-point[data-direction="left"] {
        left: -6px;
        top: 50%;
        transform: translateY(-50%);
    }

    .connection-point[data-direction="top"] {
        top: -6px;
        left: 50%;
        transform: translateX(-50%);
    }

    .connection-point[data-direction="bottom"] {
        bottom: -6px;
        left: 50%;
        transform: translateX(-50%);
    }

    .connection-point.active {
        opacity: 1;
        background: #FF5722;
        animation: pulse 1s infinite;
    }

    .connections-canvas {
        position: absolute;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        pointer-events: none;
        z-index: 1;
    }

    .connection-line {
        stroke-width: 3;
        fill: none;
        stroke: url(#connectionGradient);
        opacity: 0.9;
        cursor: pointer;
        pointer-events: all;
    }

    .connection-line:hover {
        stroke-width: 3;
        opacity: 1;
    }

    .connection-arrow {
        fill: url(#connectionGradient);
        opacity: 0.8;
    }

    .connection-label {
        fill: #333;
        font-size: 10px;
        font-weight: bold;
        text-anchor: middle;
        pointer-events: none;
    }

    .temp-connection {
        stroke: #666;
        stroke-width: 2;
        stroke-dasharray: 5,5;
        opacity: 0.6;
    }

    @keyframes pulse {
        0% { transform: scale(1); }
        50% { transform: scale(1.3); }
        100% { transform: scale(1); }
    }

    @keyframes connectionFlow {
        0% { stroke-dashoffset: 0; }
        100% { stroke-dashoffset: 20; }
    }

    .connection-line.animated {
        stroke-dasharray: 4,4;
        animation: connectionFlow 1s linear infinite;
    }

    .connection-controls {
        position: absolute;
        top: 20px;
        right: 20px;
        z-index: 20;
    }

    .control-btn {
        background: rgba(255, 255, 255, 0.95);
        border: 1px solid rgba(0, 0, 0, 0.1);
        border-radius: 8px;
        padding: 8px;
        cursor: pointer;
        transition: all 0.2s ease;
        backdrop-filter: blur(10px);
        display: flex;
        align-items: center;
        justify-content: center;
        width: 36px;
        height: 36px;
        box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);
    }

    .control-btn:hover {
        background: rgba(255, 255, 255, 1);
        transform: scale(1.05);
        box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15);
    }

    .control-btn:active {
        transform: scale(0.95);
    }

    .clear-connections {
        color: #f44336;
    }

    .clear-connections:hover {
        background: rgba(244, 67, 54, 0.1);
        color: #d32f2f;
    }

    /* Error message animation */
    @keyframes fadeInOut {
        0% { opacity: 0; transform: translate(-50%, -50%) scale(0.8); }
        20% { opacity: 1; transform: translate(-50%, -50%) scale(1); }
        80% { opacity: 1; transform: translate(-50%, -50%) scale(1); }
        100% { opacity: 0; transform: translate(-50%, -50%) scale(0.8); }
    }



    /* Animations */
    @keyframes float {
        0%, 100% { transform: translateY(0px); }
        50% { transform: translateY(-10px); }
    }

    @keyframes robotPulse {
        0%, 100% { transform: scale(1); }
        50% { transform: scale(1.05); }
    }

    @keyframes blink {
        0%, 90%, 100% { opacity: 1; }
        95% { opacity: 0; }
    }

    @keyframes dash {
        0% { stroke-dashoffset: 0; }
        100% { stroke-dashoffset: -10; }
    }

    @keyframes serviceFloat {
        0%, 100% { transform: translateY(0px); }
        50% { transform: translateY(-8px); }
    }

    @keyframes serviceBlink {
        0%, 70%, 100% { opacity: 1; }
        35% { opacity: 0.3; }
    }

    /* Dark mode support */
    :global(body.dark-mode) .agent-system {
        background: linear-gradient(145deg, #2c3e50 0%, #34495e 100%);
        border-color: rgba(255, 255, 255, 0.1);
    }

    :global(body.dark-mode) .agent-node {
        background: rgba(52, 73, 94, 0.95);
        border-color: rgba(255, 255, 255, 0.1);
    }

    :global(body.dark-mode) .agent-name {
        color: #ecf0f1;
    }

    :global(body.dark-mode) .behaviour-type {
        color: #bdc3c7;
        background: rgba(189, 195, 199, 0.1);
    }

    :global(body.dark-mode) .agent-status.available {
        color: #2ecc71;
        background: rgba(46, 204, 113, 0.1);
    }

    :global(body.dark-mode) .agent-status.unavailable {
        color: #e74c3c;
        background: rgba(231, 76, 60, 0.1);
    }

    :global(body.dark-mode) .service-node {
        background: rgba(52, 73, 94, 0.95);
    }

    :global(body.dark-mode) .service-name {
        color: #ecf0f1;
    }

    :global(body.dark-mode) .feature {
        color: #bb8fce;
        background: rgba(187, 143, 206, 0.1);
    }

    /* Interactive Instructions */
    .interactive-instructions {
        margin-top: 15px;
        text-align: center;
    }

    .instruction-content {
        display: flex;
        align-items: center;
        justify-content: center;
        gap: 12px;
        background: rgba(255, 255, 255, 0.9);
        border-radius: 25px;
        padding: 10px 20px;
        max-width: 400px;
        margin: 0 auto;
        box-shadow: 0 4px 15px rgba(0, 0, 0, 0.08);
        border: 1px solid rgba(0, 0, 0, 0.05);
    }

    .instruction-icon {
        font-size: 20px;
        flex-shrink: 0;
    }

    .instruction-content p {
        font-size: 13px;
        color: #6c757d;
        margin: 0;
        font-weight: 500;
    }

    /* Dark mode support for instructions */
    :global(body.dark-mode) .instruction-content {
        background: rgba(52, 73, 94, 0.9);
        border-color: rgba(255, 255, 255, 0.1);
    }

    :global(body.dark-mode) .instruction-content p {
        color: #bdc3c7;
    }

    /* Responsive design */
    @media (max-width: 768px) {
        .agent-system {
            height: 500px;
            max-width: 100%;
        }
        
        .agents-container {
            padding: 30px 40px;
        }
        
        .agent-node {
            width: 160px;
            padding: 10px;
        }
        
        .central-services {
            flex-direction: column;
            gap: 20px;
        }

        .service-node {
            width: 140px;
        }
        
        .robot-head {
            width: 40px;
            height: 40px;
        }
        
        .agent-name {
            font-size: 12px;
        }
        
        .behaviour-type {
            font-size: 9px;
        }

        .instruction-content {
            padding: 8px 16px;
            max-width: 300px;
        }

        .instruction-content p {
            font-size: 12px;
        }

        .instruction-icon {
            font-size: 18px;
        }
    }
</style>

<script>
    class ConnectionSystem {
        constructor() {
            this.connections = [];
            this.isConnecting = false;
            this.startPoint = null;
            this.tempLine = null;
            this.canvas = null;
            this.connectionsGroup = null;
            this.init();
        }

        init() {
            this.canvas = document.querySelector('.connections-canvas');
            this.connectionsGroup = document.querySelector('.connections-group');
            this.tempLine = document.querySelector('.temp-connection');
            
            this.setupEventListeners();
            this.createDefaultConnection();
        }

        setupEventListeners() {
            // Connection point events
            document.querySelectorAll('.connection-point').forEach(point => {
                point.addEventListener('mousedown', (e) => this.startConnection(e));
                point.addEventListener('mouseup', (e) => this.endConnection(e));
                point.addEventListener('mouseenter', (e) => this.highlightPoint(e));
                point.addEventListener('mouseleave', (e) => this.unhighlightPoint(e));
            });

            // Mouse move for dragging
            document.addEventListener('mousemove', (e) => this.updateTempConnection(e));
            document.addEventListener('mouseup', () => this.cancelConnection());
        }

        startConnection(e) {
            e.preventDefault();
            e.stopPropagation();
            
            this.isConnecting = true;
            this.startPoint = e.target;
            this.startPoint.classList.add('active');
            
            const rect = this.canvas.getBoundingClientRect();
            const pointRect = this.startPoint.getBoundingClientRect();
            
            const x = pointRect.left + pointRect.width/2 - rect.left;
            const y = pointRect.top + pointRect.height/2 - rect.top;
            
            this.tempLine.setAttribute('x1', x);
            this.tempLine.setAttribute('y1', y);
            this.tempLine.setAttribute('x2', x);
            this.tempLine.setAttribute('y2', y);
            this.tempLine.setAttribute('opacity', '1');
        }

        updateTempConnection(e) {
            if (!this.isConnecting || !this.tempLine) return;
            
            const rect = this.canvas.getBoundingClientRect();
            const x = e.clientX - rect.left;
            const y = e.clientY - rect.top;
            
            this.tempLine.setAttribute('x2', x);
            this.tempLine.setAttribute('y2', y);
        }

        endConnection(e) {
            if (!this.isConnecting || !this.startPoint) return;
            
            const endPoint = e.target;
            if (endPoint === this.startPoint) return;
            
            const startNodeId = this.startPoint.closest('[data-node-id]').dataset.nodeId;
            const endNodeId = endPoint.closest('[data-node-id]').dataset.nodeId;
            
            if (startNodeId === endNodeId) return;
            
            this.createConnection(this.startPoint, endPoint);
            this.cancelConnection();
        }

        cancelConnection() {
            if (this.startPoint) {
                this.startPoint.classList.remove('active');
            }
            this.isConnecting = false;
            this.startPoint = null;
            if (this.tempLine) {
                this.tempLine.setAttribute('opacity', '0');
                this.tempLine.setAttribute('x1', '0');
                this.tempLine.setAttribute('y1', '0');
                this.tempLine.setAttribute('x2', '0');
                this.tempLine.setAttribute('y2', '0');
            }
        }

        highlightPoint(e) {
            if (this.isConnecting && e.target !== this.startPoint) {
                e.target.style.background = '#FF9800';
            }
        }

        unhighlightPoint(e) {
            if (e.target !== this.startPoint) {
                e.target.style.background = '#4CAF50';
            }
        }

        createConnection(startPoint, endPoint) {
            const rect = this.canvas.getBoundingClientRect();
            const startRect = startPoint.getBoundingClientRect();
            const endRect = endPoint.getBoundingClientRect();
            
            const x1 = startRect.left + startRect.width/2 - rect.left;
            const y1 = startRect.top + startRect.height/2 - rect.top;
            const x2 = endRect.left + endRect.width/2 - rect.left;
            const y2 = endRect.top + endRect.height/2 - rect.top;
            
            // Debug log
            console.log('Creating connection:', {
                startNodeId: startPoint.closest('[data-node-id]').dataset.nodeId,
                endNodeId: endPoint.closest('[data-node-id]').dataset.nodeId,
                x1, y1, x2, y2
            });
            
            // Get node types
            const startNodeId = startPoint.closest('[data-node-id]').dataset.nodeId;
            const endNodeId = endPoint.closest('[data-node-id]').dataset.nodeId;
            
            // Check if this is a FIWARE connection
            const isFiwareConnection = endNodeId === 'fiware-iot' || startNodeId === 'fiware-iot';
            
            // If it's a FIWARE connection, only allow Agent 2
            if (isFiwareConnection) {
                const agentNodeId = endNodeId === 'fiware-iot' ? startNodeId : endNodeId;
                if (agentNodeId !== 'agent2') {
                    // Show visual feedback and return
                    this.showConnectionError('Only Agent 2 can connect to FIWARE');
                    return;
                }
            }
            
            // Check if this is a MCP Server connection
            const isMcpConnection = endNodeId === 'mcp-server' || startNodeId === 'mcp-server';
            
            // If it's a MCP Server connection, only allow Agent 3
            if (isMcpConnection) {
                const agentNodeId = endNodeId === 'mcp-server' ? startNodeId : endNodeId;
                if (agentNodeId !== 'agent3') {
                    // Show visual feedback and return
                    this.showConnectionError('Only Agent 3 can connect to MCP Server');
                    return;
                }
            }
            
            // Create connection group
            const connectionGroup = document.createElementNS('http://www.w3.org/2000/svg', 'g');
            connectionGroup.classList.add('connection');
            
            // Create curved path with arrow marker
            const path = document.createElementNS('http://www.w3.org/2000/svg', 'path');
            const controlX = (x1 + x2) / 2;
            const controlY = (y1 + y2) / 2 - 30;
            
            const pathData = `M ${x1} ${y1} Q ${controlX} ${controlY} ${x2} ${y2}`;
            path.setAttribute('d', pathData);
            path.classList.add('connection-line', 'animated');
            
            // Force stroke properties directly
            path.setAttribute('stroke', '#64b5f6');
            path.setAttribute('stroke-width', '3');
            path.setAttribute('fill', 'none');
            path.setAttribute('opacity', '0.9');
            
            // Debug: Add visible stroke temporarily
            console.log('Path data:', pathData);
            
            // Determine connection type and label
            let connectionLabel = 'Connection';
            let markerType = 'url(#arrowhead)';
            
            if (isFiwareConnection) {
                connectionLabel = 'PubSub';
                markerType = 'url(#arrowhead-pubsub)';
                path.setAttribute('stroke', '#00bcd4');
            } else if (isMcpConnection) {
                connectionLabel = 'HTTP Streaming';
                markerType = 'url(#arrowhead-mcp)';
                path.setAttribute('stroke', '#ff6b6b');
            } else {
                // Connection between agents
                const isAgentConnection = startNodeId.includes('agent') && endNodeId.includes('agent');
                if (isAgentConnection) {
                    connectionLabel = 'XMPP message';
                }
                // Keep the blue stroke already set above
            }
            
            path.setAttribute('marker-end', markerType);
            
            // Add label
            const label = document.createElementNS('http://www.w3.org/2000/svg', 'text');
            label.setAttribute('x', controlX);
            label.setAttribute('y', controlY - 5);
            label.textContent = connectionLabel;
            label.classList.add('connection-label');
            
            connectionGroup.appendChild(path);
            connectionGroup.appendChild(label);
            
            // Delete on double click
            connectionGroup.addEventListener('dblclick', () => {
                connectionGroup.remove();
                this.connections = this.connections.filter(conn => conn.element !== connectionGroup);
            });
            
            this.connectionsGroup.appendChild(connectionGroup);
            
            // Debug: Log connection creation
            console.log('Connection added to DOM:', connectionGroup);
            console.log('Total connections:', this.connectionsGroup.children.length);
            
            this.connections.push({
                element: connectionGroup,
                startPoint,
                endPoint
            });
        }

        showConnectionError(message) {
            // Create temporary error message
            const errorDiv = document.createElement('div');
            errorDiv.textContent = message;
            errorDiv.style.cssText = `
                position: fixed;
                top: 50%;
                left: 50%;
                transform: translate(-50%, -50%);
                background: #f44336;
                color: white;
                padding: 10px 20px;
                border-radius: 8px;
                z-index: 1000;
                font-size: 14px;
                font-weight: bold;
                animation: fadeInOut 2s ease-in-out;
            `;
            
            document.body.appendChild(errorDiv);
            
            setTimeout(() => {
                errorDiv.remove();
            }, 2000);
        }

        createDefaultConnection() {
            // No default connections - let users create their own
            console.log('System initialized - ready for connections');
        }

        clearAllConnections() {
            // Clear all connections
            this.connections.forEach(conn => conn.element.remove());
            this.connections = [];
            
            // Clear any remaining elements in the connections group
            while (this.connectionsGroup.firstChild) {
                this.connectionsGroup.removeChild(this.connectionsGroup.firstChild);
            }
            
            // Hide temp connection line
            this.tempLine.setAttribute('opacity', '0');
            
            // Cancel any ongoing connection
            this.cancelConnection();
        }
    }

    // Initialize when DOM is loaded
    document.addEventListener('DOMContentLoaded', () => {
        const connectionSystem = new ConnectionSystem();
        
        // Setup clear connections button
        const clearBtn = document.querySelector('.clear-connections');
        if (clearBtn) {
            clearBtn.addEventListener('click', () => {
                connectionSystem.clearAllConnections();
            });
        }
    });
</script>